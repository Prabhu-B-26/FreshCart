/**
 * @fileoverview Firestore Security Rules for GrocerEase application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open access for product listings with strict user-ownership for personal data like cart items and orders. Administrative privileges are managed through a dedicated collection.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /products/{productId}: Product catalog, publicly readable but with restricted write access (admin only).
 * - /users/{userId}/cart_items/{cartItemId}: User's shopping cart, accessible only to the user.
 * - /users/{userId}/orders/{orderId}: User's order history, accessible only to the user.
 * - /roles_admin/{userId}: Admin role management, granting admin privileges based on document existence.
 *
 * Key Security Decisions:
 * - Product listings are publicly readable to allow browsing without authentication.
 * - User data (cart, orders) is strictly isolated using path-based ownership.
 * - Admin privileges are granted by the presence of a document in the `/roles_admin` collection. Listing of `/users` is disallowed.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` role is determined by the existence of a document in the `/roles_admin/{userId}` collection, which is checked via the `isAdmin()` function.
 *
 * Structural Segregation:
 * - Public product listings are separated from private user data to allow for open read access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document, based on the userId.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read the product list and details.
     * @allow (create): Only admins can create new products.
     * @allow (update, delete): Only admins can update or delete products.
     * @deny (create): Non-admins cannot create products.
     * @deny (update, delete): Non-admins cannot update or delete products.
     * @principle Allows public read access to product information while restricting write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create): Only the user themselves can create their profile.
     * @allow (get, update, delete): Only the user themselves can access or modify their profile.
     * @deny (list): Listing all users is not allowed.
     * @principle Enforces user-ownership for user profiles and prevents unauthorized listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/cart_items collection.
     * @path /users/{userId}/cart_items/{cartItemId}
     * @allow (get, list, create, update, delete): Only the user themselves can manage their cart items.
     * @principle Enforces user-ownership for cart items.
     */
    match /users/{userId}/cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): Only the user themselves can access their order history.
     * @principle Enforces user-ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId}/order_items collection.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list, create, update, delete): Only the user themselves can manage their order items.
     * @principle Enforces user-ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Rules for the /roles_admin collection.
       * @path /roles_admin/{userId}
       * @allow (get, list): No one can read the list of admins, or get a specific admin directly. Admin status is checked by existence only.
       * @allow (create, update, delete): Only admins can manage other admins.
       * @principle Restricts management of admin roles to existing admins.
       */
    match /roles_admin/{userId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}