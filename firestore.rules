/**
 * @file Firestore Security Rules for GrocerEase Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to product information. Administrative privileges are granted
 * based on the existence of a document in the `roles_admin` collection.
 *
 * @data_structure
 * - `/users/{userId}`: Stores user profiles, accessible only by the user themselves.
 * - `/products/{productId}`: Stores product information, publicly readable.
 * - `/users/{userId}/cart_items/{cartItemId}`: Stores cart items, accessible only by the user.
 * - `/users/{userId}/orders/{orderId}`: Stores order information, accessible only by the user.
 * - `/users/{userId}/orders/{orderId}/order_items/{orderItemId}`: Stores order items, accessible only by the user.
 * - `/roles_admin/{userId}`: Indicates admin privileges; document existence grants admin rights.
 *
 * @key_security_decisions
 * - User listing is disabled.
 * - Public read access is granted to the `/products` collection.
 * - Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 * - All write operations on user-owned data are restricted to the owning user.
 *
 * @denormalization_for_authorization
 *  - Admin privileges are managed by the presence of a document in `/roles_admin/{userId}`.
 *    This avoids the need to store admin status directly in the user document and simplifies
 *    the security rules for admin-only operations by using `exists()` to check for the role.
 *
 * @structural_segregation
 *  - User-specific data (cart items, orders) is stored in subcollections under `/users/{userId}`,
 *    ensuring private data is separate from public data (products).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     *   `request.auth.uid == 'user123'` and the document ID is 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their profile.
     *   `request.auth.uid == 'user123'` and the resource exists.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *   `request.auth.uid != 'user123'`.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, and delete the profile of 'user123'.
     *   `request.auth.uid != 'user123'`.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isSelfCreate(userId);
      allow update: if isExistingOwner(userId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read product information, but restricts creation, updates, and deletion.
     * @path /products/{productId}
     * @allow (get, list) - Any user (signed in or not) can read product information.
     * @deny (create, update, delete) - No one can create, update, or delete products without specific authorization (TODO: Add admin role check).
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true; // Public read access for products.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows users to manage their own cart items.
     * @path /users/{userId}/cart_items/{cartItemId}
     * @allow (create, get, update, delete, list) - User with ID 'user123' can manage their own cart items.
     *   `request.auth.uid == 'user123'`.
     * @deny (create, get, update, delete, list) - User with ID 'user456' cannot manage cart items for 'user123'.
     *   `request.auth.uid != 'user123'`.
     * @principle Enforces document ownership for all operations on cart items.
     */
    match /users/{userId}/cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidCartItemCreate(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own order information.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete, list) - User with ID 'user123' can manage their own orders.
     *   `request.auth.uid == 'user123'`.
     * @deny (create, get, update, delete, list) - User with ID 'user456' cannot manage orders for 'user123'.
     *   `request.auth.uid != 'user123'`.
     * @principle Enforces document ownership for all operations on orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidOrderCreate(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own order items within their orders.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, update, delete, list) - User with ID 'user123' can manage order items within their orders.
     *   `request.auth.uid == 'user123'`.
     * @deny (create, get, update, delete, list) - User with ID 'user456' cannot manage order items for 'user123'.
     *   `request.auth.uid != 'user123'`.
     * @principle Enforces document ownership for all operations on order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isOrderOwner(userId, orderId);
      allow create: if isOrderOwner(userId, orderId) && isValidOrderItemCreate(userId, orderId);
      allow update: if isExistingOrderOwner(userId, orderId);
      allow delete: if isExistingOrderOwner(userId, orderId);
    }

    /**
     * @description Grants admin privileges to a user if a document exists for them in this collection.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) - Only an existing admin can manage admin roles.
     * @allow (list) - Listing of admin roles is not allowed.
     * @principle Role-based access control using document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    //----------------------------------------------------------------------------------------------
    // Helper functions
    //----------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to check.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is creating their own user document.
     * @param userId The user ID to check.
     * @return True if the user is creating their own document, false otherwise.
     */
    function isSelfCreate(userId) {
      return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param userId The user ID to check.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user ID field is not changed during an update operation.
      * @param userId The user ID to check.
      * @return True if the user ID field is not changed, false otherwise.
      */
    function isUserIdNotChanged(userId) {
        return resource.data.id == userId;
    }

    /**
     * @description Checks if the user is the owner of the order.
     * @param userId The user ID to check.
     * @param orderId The order ID to check.
     * @return True if the user is the owner of the order, false otherwise.
     */
    function isOrderOwner(userId, orderId) {
      return isSignedIn() && request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)/orders/$(orderId)).data.userId == userId;
    }

    /**
     * @description Checks if the user is the owner of the order and the document exists.
     * @param userId The user ID to check.
     * @param orderId The order ID to check.
     * @return True if the user is the owner of the order and the document exists, false otherwise.
     */
    function isExistingOrderOwner(userId, orderId) {
      return isOrderOwner(userId, orderId) && resource != null;
    }

    /**
     * @description Checks if the create request for a cart item is valid.
     * @param userId The user ID to check.
     * @return True if the create request is valid, false otherwise.
     */
    function isValidCartItemCreate(userId) {
      return request.resource.data.userId == userId;
    }

    /**
     * @description Checks if the create request for an order is valid.
     * @param userId The user ID to check.
     * @return True if the create request is valid, false otherwise.
     */
    function isValidOrderCreate(userId) {
      return request.resource.data.userId == userId;
    }

    /**
     * @description Checks if the create request for an order item is valid.
     * @param userId The user ID to check.
     * @param orderId The order ID to check.
     * @return True if the create request is valid, false otherwise.
     */
    function isValidOrderItemCreate(userId, orderId) {
      return get(/databases/$(database)/documents/users/$(userId)/orders/$(orderId)).data.userId == userId && request.resource.data.orderId == orderId;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @return True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}